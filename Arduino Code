//dug v3.1 - detect PIR sensor High, play random WAV. repeat to infinity. and beyond.

#include <FatReader.h>
#include <SdReader.h>
#include "WaveUtil.h"
#include "WaveHC.h"

SdReader card;    // This object holds the information for the card
FatVolume vol;    // This holds the information for the partition on the card
FatReader root;   // This holds the information for the filesystem on the card
FatReader file;      // This holds the information for the file we're play

WaveHC wave;      // This is the only wave (audio) object, since we will only play one at a time

/* PIN for LED - Eyes*/
int eyeleds = 4; 

/* PIN FOR SENSOR */
int pirPin = 8;               // choose the input pin (for PIR sensor)

/* PIN FOR SERVO */
int servoPin = 9;


int calibrationTime = 30;         //the time we give the sensor to calibrate itself (10-60 secs according to the datasheet)
int filenum;
int lastRand = -1;              // Keep track of the last random number, to avoid duplicates

int pirState = LOW;             // we start, assuming no motion detected
int wavMax = 11;                //max # of wav files on the card
int randNumber;

int minPulse     =  1;  // minimum servo position
int maxPulse     =  2600;  // maximum servo position
int turnRate     =  500;  // servo turn rate increment (larger value, faster rate)
int refreshTime  =  20;   // time (ms) between pulses (50Hz)
int mouthchange = 6;  //checks to see if mouth position needs to be changed

/** The Arduino will calculate these values for you **/
int centerServo;         // center servo position
int pulseWidth;          // servo pulse width
long lastPulse   = 0;    // recorded time (ms) of the last pulse

// this handy function will return the number of bytes currently free in RAM, great for debugging!   
int freeRam(void)
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
  }
  return free_memory;
}

void sdErrorCheck(void)
{
  if (!card.errorCode()) return;
  putstring("\n\rSD I/O error: ");
  Serial.print(card.errorCode(), HEX);
  putstring(", ");
  Serial.println(card.errorData(), HEX);
  while(1);
}

void setup() {
  byte i;
 
  // set up serial port
  Serial.begin(9600);
  
  // Set the functionality for all of the pins - INPUT or OUTPUT
  pinMode(pirPin, INPUT);
  pinMode(eyeleds, OUTPUT);
  pinMode(servoPin, OUTPUT);
  // Set the output pins for the DAC control. This pins are defined in the library
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  
  digitalWrite(pirPin, LOW);
 
  putstring("Free RAM: ");       // This can help with debugging, running out of RAM is bad
  Serial.println(freeRam());      // if this is under 150 bytes it may spell trouble!
  
  
  centerServo = maxPulse - ((maxPulse - minPulse)/2);
  pulseWidth = centerServo;   // Give the servo a starting point (or it floats)
  //  if (!card.init(true)) { //play with 4 MHz spi if 8MHz isn't working for you
  if (!card.init()) {         //play with 8 MHz spi (default faster!) 
    putstring_nl("Card init. failed!");  // Something went wrong, lets print out why
    sdErrorCheck();
    while(1);                            // then 'halt' - do nothing!
  }
 
  // enable optimize read - some cards may timeout. Disable if you're having problems
  card.partialBlockRead(true);

// Now we will look for a FAT partition!
  uint8_t part;
  for (part = 0; part < 5; part++) {     // we have up to 5 slots to look in
    if (vol.init(card, part))
      break;                             // we found one, lets bail
  }
  if (part == 5) {                       // if we ended up not finding one  :(
    putstring_nl("No valid FAT partition!");
    sdErrorCheck();      // Something went wrong, lets print out why
    while(1);                            // then 'halt' - do nothing!
  }
 
  // Lets tell the user about what we found
  putstring("Using partition ");
  Serial.print(part, DEC);
  putstring(", type is FAT");
  Serial.println(vol.fatType(),DEC);     // FAT16 or FAT32?
 
  // Try to open the root directory
  if (!root.openRoot(vol)) {
    putstring_nl("Can't open root dir!"); // Something went wrong,
    while(1);                             // then 'halt' - do nothing!
  }

  PgmPrintln("Files found:");
  root.ls();
  
  // Whew! We got past the tough parts.
  putstring_nl("Ready!");
 
    //give the sensor some time to calibrate
      Serial.print("calibrating sensor ");
      delay(1000);
        for(int i = 0; i < calibrationTime; i++){
            Serial.print(".");
            delay(1000);
            }
        Serial.println(" done");
        Serial.println("SENSOR ACTIVE");
        digitalWrite(eyeleds, HIGH);
        delay(50);
     
    }




void loop() {
  byte i;
  
  if(digitalRead(pirPin) == HIGH){
    
    digitalWrite(eyeleds, HIGH);
    Serial.print("motion detected at ");
    Serial.print(millis()/1000);
    Serial.println(" sec");
    
    randNumber = random(3);
   
    while(randNumber == lastRand) { //prevent 2 identical #'s
         randNumber = random(3);
    }
    
    lastRand = randNumber;
    
    Serial.println(randNumber);

    switch (randNumber) {
     case 0:    
       speaknum('0');
       break;          
     case 1:     
       speaknum('1');
       break;
     case 2:     
       speaknum('2');
       break;
      case 3:     
        speaknum('3');
        break;
     default:     
        speaknum('0');
        break;  
    }
           
    digitalWrite(eyeleds, LOW);
    pirState = LOW;
    delay(500);
    Serial.println("Ready");
    
  }
}

/////////////////////////////////// HELPERS

char filename[13];

void speaknum(char c) {
  uint8_t i=0;
  Serial.println("speaknum");
  // copy flash string for 'period' to filename
  strcpy_P(filename, PSTR("PWAV~1.WAV")); // 0WAV~1.WAV

  
  if ('0' <= c && c <= '9') {
    // digit - change 'P' to digit
    filename[0] = c;
    i = 1;
  } 
  else if (c != '.') {
    // error if not period
    return;
  }
  playcomplete(filename);
}

// Plays a full file from beginning to end with no pause.
void playcomplete(char *name) {
  char i;
  uint8_t volume;
  int v2;
  // call our helper to find and play this name
 Serial.println("playcomplete");
  playfile(name);
  while (wave.isplaying) {
    
    for (i=0; i<8; i++) {
        v2 = analogRead(1);
        delay(5);
    }

    if (v2 > 440) {
           pulseWidth = 1300;
           mouthchange = 1;
    } else {
           pulseWidth = 680;
           mouthchange = 1;
    }

    digitalWrite(servoPin, HIGH);   // start the pulse
    delayMicroseconds(pulseWidth);  // pulse width
    digitalWrite(servoPin, LOW);    // stop the pulse
  }
  // now its done playing
}

void playfile(char *name) {
  // see if the wave object is currently doing something
  if (wave.isplaying) {// already playing something, so stop it!
    wave.stop(); // stop it
  }
  // look in the root directory and open the file
  if (!file.open(root, name)) {
    putstring("Couldn't open file "); Serial.print(name); return;
  }
  // OK read the file and turn it into a wave object
  if (!wave.create(file)) {
    putstring_nl("Not a valid WAV"); return;
  }
 
  // ok time to play! start playback
  wave.play();
}
